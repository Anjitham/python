                         OOP's
-------class-------
plan,designpattern,template
     --attributes
    --methods

-------object-------
real world entities

Eg:
class Student:
     name:str
     rollno:int
     stream:str

     def set_student(self,name,rollno,stream):
         self.name=name
         self.rollno=rollno
         self.stream=stream

     def display_student(self):
         print(self.name,self.rollno,self.stream)



-------__str__--------
str method from object class will be invoked in every prgm,thats why it prunt an hexadecimal value,--->Method overriding
to print exact value dreate an __str__ inside the function we create


-------INHERITANCE-----

properties and attributes are aquired by child
__str__ defined in oject class
so whenever we use print(obj) classs we created will be inherited from object classs
str,int,bool,list,set,tuple----->obj(parent class)
single level and multilevel inheritance,multiple inheritance
if parent1 has m1 and parent2 has m1 ,
    ch=child(parent1,parent2)
    ch.m1()--->o/p in the order of inheritance and vice versa 

-------ARGS-------
Avoid method overloading
same name and diff method
EX:
class Calculator:
    def add(self,n1,n2):
    return n1+n2

    def add(self,n1,n2,n3):
    return n1+n2+n3

    def add(self,n1,n2,n3,n4):
    return n1+n2+n3+n4

op=Calculator()
print(op.add(1,2,3,4))---->this add calls the recent function only
--> can be replaced with args

-------POLYMORPHISM---------
---Method overriding
2 classes should be there
child should be inherited from parent
signature should be same(method name should be same)
---Method overloading
same method name diff parameters


-------Abstraction-------
abstract class contain abstract methods
and its definitions should be provided by the inherited class
